======== jenkins-abe-agent-pod.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent-pod
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-abe-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-abe-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsAbePodAgent
spec:
  containers:
  - name: maven
    image: nexus.unionbank.com:5000/maven:3.6-jdk-11-mufg-2
    imagePullPolicy: Always
    command: [ "/bin/sh","-c" ]
    args: [ "/usr/local/bin/mvn-entrypoint.sh; cat" ]
    tty: true
    volumeMounts:
    - mountPath: /usr/share/maven/conf/settings.xml
      name: maven-settings
      subPath: settings.xml
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts
  - name: maven-jdk6
    image: nexus.unionbank.com:5000/maven:3.2.5-jdk-6
    imagePullPolicy: Always
    command: [ "/bin/sh","-c" ]
    args: [ "/usr/local/bin/mvn-entrypoint.sh; cat" ]
    tty: true
    volumeMounts:
    - mountPath: /usr/share/maven/conf/settings.xml
      name: maven-settings
      subPath: settings.xml
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts
  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: jenkins
    - name: GIT_COMMITTER_EMAIL
      value: jenkins
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts
  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: maven-settings
    configMap:
      name: managed-maven-settings-prod
      items:
      - key: settings.xml
        path: settings.xml
  - name: maven-artifacts
    emptyDir: { }
======== jenkins-agent-pod-android.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent-pod
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-android-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-android-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsAndroidPodAgent
spec:
  containers:
  - name: android
    image: nexus.unionbank.com:5000/android/android-sdk:maven-3.6.3-jdk-8-mufg-6
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    env:
    - name: MAVEN_OPTS
      value: "-Xmx512m -Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /usr/share/maven/conf/settings.xml
      name: maven-settings
      subPath: settings.xml
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts
  - name: python-aws
    image: nexus.unionbank.com:5000/python-aws:latest
    command:
    - cat
    tty: true
  - name: node
    image: nexus.unionbank.com:5000/node:10.16.3-mufg-1
    command:
    - cat
    tty: true
  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: jenkins
    - name: GIT_COMMITTER_EMAIL
      value: jenkins
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts
  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: maven-settings
    configMap:
      name: managed-maven-settings-prod
      items:
      - key: settings.xml
        path: settings.xml
  - name: maven-artifacts
    emptyDir: { }
======== jenkins-agent-pod-angular.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-angular-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-angular-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsAngularPodAgent
spec:
  containers:
  - name: node
    image: nexus.unionbank.com:5000/node:10.16.3-mufg-2
    imagePullPolicy: Always
    env:
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts
  - name: python
    image: nexus.unionbank.com:5000/rhscl-python-36-rhel7-mufg-dsops:0.2
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: DSO_Jenkins
    - name: GIT_COMMITTER_EMAIL
      value: cicd-help@unionbank.com
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command: [ "/bin/sh","-c" ]
    args: [ "/usr/local/bin/set-user-id; cat" ]
    tty: true
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts

  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: DSO_Jenkins
    - name: GIT_COMMITTER_EMAIL
      value: cicd-help@unionbank.com
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts
  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: artifacts
    emptyDir: { }
======== jenkins-agent-pod-api-promotion.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent-pod
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-api-promotion-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-api-promotion-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsAPIPromotionPodAgent
spec:
  containers:
  - name: maven
    image: nexus.unionbank.com:5000/maven:3.6-jdk-11-mufg-4
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    env:
    - name: MAVEN_OPTS
      value: "-Xmx512m -Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /usr/share/maven/conf/settings.xml
      name: maven-settings
      subPath: settings.xml
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts

  - name: wso2
    image: nexus.unionbank.com:5000/jenkins-agents/wso2:2.0.10
    env:
    - name: http_proxy
      value: http://ub-app-proxy.uboc.com:80
    - name: https_proxy
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command:
    - cat
    tty: true

  - name: wso32
    image: nexus.unionbank.com:5000/jenkins-agents/wso2:3.0.3
    env:
    - name: http_proxy
      value: http://ub-app-proxy.uboc.com:80
    - name: https_proxy
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command:
    - cat
    tty: true

  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: jenkins
    - name: GIT_COMMITTER_EMAIL
      value: jenkins
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts

  - name: python3
    image: nexus.unionbank.com:5000/rhscl-python-36-rhel7-mufg-dsops:0.2
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: DSO_Jenkins
    - name: GIT_COMMITTER_EMAIL
      value: cicd-help@unionbank.com
    # Set up proxy for reaching ServiceNow API
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command: [ "/bin/sh","-c" ]
    args: [ "/usr/local/bin/set-user-id; cat" ]
    tty: true

  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: maven-settings
    configMap:
      name: managed-maven-settings
      items:
      - key: settings.xml
        path: settings.xml
  - name: maven-artifacts
    emptyDir: { }

======== jenkins-agent-pod-js-aws.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-js-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-js-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsJSPodAgent
spec:
  # Add nodeSelector to accommodate the latest Kubernetes plugin which assumed k8s 1.14 is the oldest supported
  # https://github.com/jenkinsci/kubernetes-plugin/releases/tag/kubernetes-1.26.0
  # This may be removed after our OpenShift is upgraded to 4.x
  nodeSelector:
    beta.kubernetes.io/os: "linux"
  containers:
  - name: node
    image: nexus.unionbank.com:5000/node-js:12-mufg-01
    imagePullPolicy: Always
    env:
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts
    - mountPath: /home/node
      name: workspace-volume
      readOnly: false
  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: jenkins
    - name: GIT_COMMITTER_EMAIL
      value: jenkins
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts
  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: artifacts
    emptyDir: { }
======== jenkins-agent-pod-js.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-js-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-js-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsJSPodAgent
spec:
  containers:
  - name: node
    image: nexus.unionbank.com:5000/node:10.16.3-mufg-2
    imagePullPolicy: Always
    env:
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts
  - name: python
    image: nexus.unionbank.com:5000/rhscl-python-36-rhel7-mufg-dsops:0.2
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: DSO_Jenkins
    - name: GIT_COMMITTER_EMAIL
      value: cicd-help@unionbank.com
    #npm use proxy to reach nexus if these env vars are configured
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command: [ "/bin/sh","-c" ]
    args: [ "/usr/local/bin/set-user-id; cat" ]
    tty: true
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts

  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: jenkins
    - name: GIT_COMMITTER_EMAIL
      value: jenkins
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts
  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: artifacts
    emptyDir: { }
======== jenkins-agent-pod-multibranch.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent-pod
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-multibranch-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-multibranch-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsMultibranchPodAgent
spec:
  containers:
  - name: maven
    image: nexus.unionbank.com:5000/maven:3.6-jdk-11-mufg-4
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    env:
    - name: MAVEN_OPTS
      value: "-Xmx512m -Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /usr/share/maven/conf/settings.xml
      name: maven-settings
      subPath: settings.xml
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts

  - name: python3
    image: nexus.unionbank.com:5000/rhscl-python-36-rhel7-mufg-dsops:0.2
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: DSO_Jenkins
    - name: GIT_COMMITTER_EMAIL
      value: cicd-help@unionbank.com
    # Set up proxy for reaching ServiceNow API
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command: [ "/bin/sh","-c" ]
    args: [ "/usr/local/bin/set-user-id; cat" ]
    tty: true

  - name: node
    image: nexus.unionbank.com:5000/node:10.16.3-mufg-1
    command:
    - cat
    tty: true
  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: jenkins
    - name: GIT_COMMITTER_EMAIL
      value: jenkins
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts
  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: maven-settings
    configMap:
      name: managed-maven-settings-prod
      items:
      - key: settings.xml
        path: settings.xml
  - name: maven-artifacts
    emptyDir: { }
======== jenkins-agent-pod-python.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-python-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-python-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsPythonPodAgent
spec:
  # Add nodeSelector to accommodate the latest Kubernetes plugin which assumed k8s 1.14 is the oldest supported
  # https://github.com/jenkinsci/kubernetes-plugin/releases/tag/kubernetes-1.26.0
  # This may be removed after our OpenShift is upgraded to 4.x
  nodeSelector:
    beta.kubernetes.io/os: "linux"
  containers:
  - name: python
    image: nexus.unionbank.com:5000/rhscl-python-38-rhel7-mufg-dsops:0.2
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: DSO_Jenkins
    - name: GIT_COMMITTER_EMAIL
      value: cicd-help@unionbank.com
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command: [ "/bin/sh","-c" ]
    args: [ "/usr/local/bin/set-user-id; cat" ]
    tty: true
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts
    - mountPath: /etc/pip.conf
      name: pip-config
      subPath: pip.conf
    - mountPath: /opt/app-root/src/.netrc
      name: pip-nexus-creds
      subPath: .netrc
    - mountPath: /opt/app-root/src/.pypirc
      name: python-pypirc
      subPath: .pypirc

  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: jenkins
    - name: GIT_COMMITTER_EMAIL
      value: jenkins
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/artifacts
      name: artifacts

  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: artifacts
    emptyDir: { }
  - name: pip-config
    configMap:
      name: python-pip-config
      items:
      - key: pip.conf
        path: pip.conf
  - name: pip-nexus-creds
    configMap:
      name: python-netrc
      items:
      - key: .netrc
        path: .netrc
  - name: python-pypirc
    configMap:
      name: python-pypirc
      items:
      - key: .pypirc
        path: .pypirc======== jenkins-agent-pod.yaml ========
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent-pod
    createdby: jenkins
    mode: dynamic
    role: jenkins-agent
  annotations:
    app: jenkins-agent-pod
    gsi: ABE
    env: PRD
    description: jenkins-agent-pod
    tier: Tier2
    entity: Bank
    gsiSubComponent: JenkinsPodAgent
spec:
  containers:
  - name: maven
    image: nexus.unionbank.com:5000/maven:3.6-jdk-11-mufg-2
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    env:
    - name: MAVEN_OPTS
      value: "-Xmx512m -Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /usr/share/maven/conf/settings.xml
      name: maven-settings
      subPath: settings.xml
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts

  - name: python-aws
    image: nexus.unionbank.com:5000/python-aws:latest
    command:
    - cat
    tty: true

  - name: node
    image: nexus.unionbank.com:5000/node:10.16.3-mufg-1
    command:
    - cat
    tty: true

  - name: python3
    image: nexus.unionbank.com:5000/rhscl-python-36-rhel7-mufg-dsops:0.2
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: DSO_Jenkins
    - name: GIT_COMMITTER_EMAIL
      value: cicd-help@unionbank.com
    # Set up proxy for reaching ServiceNow API
    - name: HTTP_PROXY
      value: http://ub-app-proxy.uboc.com:80
    - name: HTTPS_PROXY
      value: http://ub-app-proxy.uboc.com:80
    command: [ "/bin/sh","-c" ]
    args: [ "/usr/local/bin/set-user-id; cat" ]
    tty: true

  - name: jnlp
    image: nexus.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
    imagePullPolicy: Always
    env:
    - name: GIT_COMMITTER_NAME
      value: jenkins
    - name: GIT_COMMITTER_EMAIL
      value: jenkins
    - name: JENKINS_AGENT_WORKDIR
      value: "/var/tmp/jenkins/agent"
    - name: JAVA_OPTS
      value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
    volumeMounts:
    - mountPath: /var/tmp/maven-artifacts
      name: maven-artifacts
  imagePullSecrets:
  - name: nexus-registry-pull

  volumes:
  - name: maven-settings
    configMap:
      name: managed-maven-settings-prod
      items:
      - key: settings.xml
        path: settings.xml
  - name: maven-artifacts
    emptyDir: { }
======== c73-c73trxui.yaml ========
gsi-code: c73
apps:
  - bitbucket-project: C73TRXUI
    repo: transactions-eip-backend
    branch: multibranch
    type: java
    cicd: true
    target-hosting-platform: openshift
    openshift:
      deployment-repo: https://bbk.unionbank.com/scm/c73trxui/transactions-eip-backendconfig.git
      deployment-config: oc_config
      projects:
        - cluster: on-prem-dev
          project: c73-dev1
          environment: dev
        - cluster: on-prem-dev
          project: c73-sit1
          environment: tst

roles:
  readers:
    - app_devops_y73_developers
  builders:
    - app_devops_y73_developers======== c73-y73eipaudits.yaml ========
gsi-code: c73
apps:
  - bitbucket-project: y73eipaudits
    repo: transactions-eip-backend
    branch: multibranch
    type: java
    cicd: true
    target-hosting-platform: openshift
    openshift:
      deployment-repo: https://bbk.unionbank.com/scm/c73eipaudits/transactions-eip-backendconfig.git
      deployment-config: oc_config
      projects:
        - cluster: on-prem-dev
          project: c73-dev1
          environment: dev
        - cluster: on-prem-dev
          project: c73-dev2
          environment: dev2
        - cluster: on-prem-dev
          project: c73-dev3
          environment: dev3
        - cluster: on-prem-dev
          project: c73-sit1
          environment: tst
        - cluster: on-prem-dev
          project: c73-sit2
          environment: tst2
        - cluster: on-prem-dev
          project: c73-sit3
          environment: tst3
        - cluster: on-prem-mmz-uat1
          project: c73-uat1
          environment: uat
        - cluster: on-prem-mmz-uat1
          project: c73-uat2
          environment: pte
        - cluster: on-prem-c73-mmz-prd-east
          project: c73-prd
          environment: master
        - cluster: on-prem-c73-mmz-prd-west
          project: c73-cdr
          environment: cdr
  - bitbucket-project: y73eipaudits
    repo: transactionlog-frontend
    branch: multibranch
    type: js
    cicd: true
    target-hosting-platform: openshift
    openshift:
      deployment-repo: https://bbk.unionbank.com/scm/y73eipaudits/transactionlog-frontendconfig.git
      deployment-config: oc_config
      projects:
        - cluster: on-prem-dev
          project: y73-dev
          environment: dev
        - cluster: on-prem-dev
          project: y73-sit
          environment: tst
        - cluster: on-prem-mmz-uat1
          project: y73-uat1
          environment: uat
        - cluster: on-prem-mmz-uat1
          project: y73-uat2
          environment: pte
        - cluster: on-prem-y73-mmz-prd-east
          project: y73-prd
          environment: prd
        - cluster: on-prem-y73-mmz-prd-west
          project: y73-cdr
          environment: cdr         
roles:
  readers:
    - app_devops_c73_readers
    - app_devops_c73_developers
  builders:
    - app_devops_c73_developers
======== casc.yaml ========
#plugins:
#  proxy:
#    name: "ub-app-proxy.uboc.com"
#    noProxyHost: "*.unionbank.com\nopn-console-mz-dev.unionbank.com\n*.btmna.com\n\
#      *.apps.btmna.com\n127.0.0.*\n10.*\n192.168.*\n172.30.*"
#    port: 80
#
jenkins: # This is what you normally see under Jenkins configure system that is supported by the Configuration as code plugin
  systemMessage: "This is the Jenkins PRODUCTION environment."
  slaveAgentPort: 50000
  numExecutors: 2
  labelString: "master"
  globalNodeProperties:
  - envVars:
      env:
      - key: "MUFG_ENV"
        value: "PROD"

  securityRealm:
    activeDirectory:
      cache:
        size: 256
        ttl: 1800
      customDomain: true
      domains:
      - bindName: "uboc-ad\\svc_proxy"
        bindPassword: "${ad_uboc_svc_proxy}"
        name: "uboc-ad.corp.uboc.com"
        tlsConfiguration: TRUST_ALL_CERTIFICATES
      - bindName: "ad\\S-AIXService"
        bindPassword: "${ad_btmna_s_aixservice}"
        name: "ad.btmna.com"
        site: "US-HQ-BTMNA"
        tlsConfiguration: TRUST_ALL_CERTIFICATES
      groupLookupStrategy: RECURSIVE
      removeIrrelevantGroups: false
      startTls: true

# Below is where config that is not directly supported by configuration as code plugin goes. Some things under unclassified might not
# actually work exactly as expected.

unclassified:
  bitbucketEndpointConfiguration:
    endpoints:
    - bitbucketCloudEndpoint:
        enableCache: false
        manageHooks: false
        repositoriesCacheDuration: 0
        teamCacheDuration: 0
    - bitbucketServerEndpoint:
        displayName: "BitBucket"
        manageHooks: false
        serverUrl: "https://bbk.unionbank.com"
  globalLibraries:
    libraries:
    - defaultVersion: "PROD"
      implicit: true
      name: "managed-pipelines"
      retriever:
        modernSCM:
          scm:
            git:
              credentialsId: "bitbucket"
              remote: "http://bbk.unionbank.com/scm/dsops/groovy_sharedlibs.git"
  globalNexusConfiguration:
    hideNvsMessage: false
    instanceId: "90b8f8a0998a4307a932efffec0af07a"
    iqConfigs:
    - credentialsId: "nexus-registry-pull"
      serverUrl: "https://iq-nexus.opn-apps-mz-dev.unionbank.com/"
    nxrmConfigs:
    - nxrm3Configuration:
        credentialsId: "nexus-registry-pull"
        displayName: "Nexus3"
        id: "nexus3"
        internalId: "17f3a316-2e24-49fe-bdcf-838f4e2b917e"
        serverUrl: "https://app-nexus.opn-apps-mz-dev.unionbank.com"
  sonarglobalconfiguration:
    buildWrapperEnabled: true
    installations:
    - name: "SonarQube-OpenShiftPoC"
      serverAuthenticationToken: "${token_sonarqube_jenkins-dev}"
      credentialsId: "sonarqube-jenkins-dev"
      serverUrl: "http://sonarqube-sonarqube-test.opn-apps-mz-dev.unionbank.com"
      triggers:
        skipScmCause: false
        skipUpstreamCause: false
  splunkJenkinsInstallation:
    enabled: true
    host: "chelmdev201.unionbank.com"
    maxEventsBatchSize: 262144
    metadataHost: "jenkins.unionbank.com"
    port: 8088
    rawEventEnabled: true
    retriesOnError: 3
    splunkAppUrl: "http://chelmdev201.unionbank.com:8000/en-US/app/splunk_app_jenkins/"
    token: "${token_splunk_hec_chelmdev201}"
    useSSL: true
======== cloud.yaml ========
#plugins:
#  proxy:
#    name: "ub-app-proxy.uboc.com"
#    noProxyHost: "*.unionbank.com\nopn-console-mz-dev.unionbank.com\n*.btmna.com\n\
#      *.apps.btmna.com\n127.0.0.*\n10.*\n192.168.*\n172.30.*"
#    port: 80
#
jenkins: # This is what you normally see under Jenkins configure system that is supported by the Configuration as code plugin
  clouds: # You can have multiple kubernetes clouds here. It is useful to have a mapping of folders/projects to OS namespaces
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-dev-blw-dev-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-dev-blw-dev"
      namespace: "blw-dev"
      serverUrl: "https://opn-console-mz-dev.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-dev-managed-pipelines-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-dev-managed-pipelines"
      namespace: "managed-pipelines"
      serverUrl: "https://opn-console-mz-dev.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-dev-wca-dev-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-dev-wca-dev"
      namespace: "wca-dev"
      serverUrl: "https://opn-console-mz-dev.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-dev-dso2-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-dev-aws-pipeline"
      namespace: "wca-dev"
      serverUrl: "https://opn-console-mz-dev.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-dev-tbcc-dev-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-dev-tbcc-dev"
      namespace: "tbcc-dev"
      serverUrl: "https://opn-console-mz-dev.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-dev-abe-dev-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-dev-abe-dev"
      namespace: "abe-dev"
      serverUrl: "https://opn-console-mz-dev.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-dev-eip-dev-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-dev-eip-dev"
      namespace: "abe-dev"
      serverUrl: "https://opn-console-mz-dev.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-prod-abe-prod-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-prod-abe-prod"
      namespace: "abe-prod"
      serverUrl: "https://opn-console-mz-prd.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
  - kubernetes:
      containerCapStr: "10"
      credentialsId: "openshift-dev-pi2-dev-jenkins"
      maxRequestsPerHostStr: "32"
      name: "openshift-dev-pi2-dev"
      namespace: "pi2-dev"
      serverUrl: "https://opn-console-mz-prd.unionbank.com"
      skipTlsVerify: true
      usageRestricted: true
======== creds.yaml ========
# See https://github.com/jenkinsci/configuration-as-code-plugin for syntax on using ${KEY}  
# as a placeholder for retrieving credentials from local filesystem
# ENV VAR - SECRETS (in the Jenkins container) - is used to set up the dir where secret files are stored
credentials:
  system:
    domainCredentials:
    - credentials:
      - usernamePassword:
          description: "Token for triggering Veracode Upload"
          id: "veracode-upload-token"
          password: "${token_veracode_svc_veracode}"
          scope: GLOBAL
          username: "svc_veracode"
      - usernamePassword:
          description: "Puppet Enterprise Cred for Distributing Deployment Config"
          id: "puppet-stash"
          password: "${ad_uboc_svc_jenkins}"
          scope: GLOBAL
          username: "svc_jenkins"
      - usernamePassword:
          description: "User Token for accessing Nexus in pipeline jobs (groovy_sharedlibs)"
          id: "nexus-user-token"
          scope: GLOBAL
          username: "${token_nexus_svc_cicdprod_username}"
          password: "${token_nexus_svc_cicdprod_password}"
      - usernamePassword:
          description: "Nexus Registry Pull Secrets"
          id: "nexus-registry-pull"
          password: "${ad_uboc_svc_imagepuller}"
          scope: GLOBAL
          username: "svc_imagepuller"
      - usernamePassword:
          description: "Credential for making API calls to Jenkins"
          id: "jenkins-api-client-prod"
          password: "${ad_uboc_svc_cicdprod}"
          scope: GLOBAL
          username: "svc_cicdprod"
      - usernamePassword:
          description: "Credential for making API calls to Jenkins"
          id: "jenkins-api-client"
          password: "${ad_uboc_svc_cidev}"
          scope: GLOBAL
          username: "svc_cidev"
      - usernamePassword:
          description: "nexus-3-repo-cred"
          id: "nexus-3-repo-cred"
          password: "${ad_uboc_svc_cidev}"
          scope: GLOBAL
          username: "svc_cidev"
      - usernamePassword:
          description: "Service Account for cloning repos from BitBucket"
          id: "bitbucket"
          password: "${ad_uboc_svc_abe2bbk}"
          scope: GLOBAL
          username: "svc_abe2bbk"
      - string:
          description: "Token for submitting SonarQube Scan"
          id: "sonarqube-jenkins-dev"
          scope: GLOBAL
          secret: "${token_sonarqube_jenkins-dev}"
      - basicSSHUserPrivateKey:
          description: "SSH key for publishing artifacts for Veracode scan"
          id: "abeadm_sshkey_for_build"
          privateKeySource:
            directEntry:
              privateKey: "${sshkey_abeadm}"
          scope: GLOBAL
          username: "abeadm"
      - string:
          description: "blw-dev:jenkins-blw-dev - Service account for accessing blw-dev\
            \ project"
          id: "jenkins-blw-dev"
          scope: GLOBAL
          secret: "${token_k8s_blw-dev-jenkins}"
      - string:
          description: "managed-pipelines:jenkins token for accessing OpenShift DEV\
            \ cluster"
          id: "openshift-dev-managed-pipelines-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_managed-pipelines-jenkins}"
      - string:
          description: "managed-pipelines:jenkins token for accessing OpenShift DEV\
            \ cluster"
          id: "managed-pipelines-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_managed-pipelines-jenkins}"
      - string:
          description: "wca-dev:jenkins token for accessing OpenShift DEV cluster"
          id: "wca-dev-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_wca-dev-jenkins}"
      - string:
          description: "dso2-jenkins:jenkins token for access Openshift DEV cluster"
          id: "openshift-dev-dso2-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_dso2-jenkins}"
      - string:
          description: "tbcc-dev:jenkins token for accessing OpenShift DEV cluster"
          id: "tbcc-dev-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_tbcc-dev-jenkins}"
      - string:
          description: "abe-dev:jenkins token for accessing OpenShift DEV cluster"
          id: "abe-dev-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_abe-dev-jenkins}"
      - string:
          description: "abe-dev:jenkins token for accessing OpenShift DEV\
            \ cluster"
          id: "openshift-dev-abe-dev-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_abe-dev-jenkins}"
      - string:
          description: "eip-dev:jenkins token for accessing OpenShift DEV\
            \ cluster"
          id: "eip-dev-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_eip-dev-jenkins}"
      - string:
          description: "pi2-dev:jenkins token for accessing OpenShift DEV cluster"
          id: "pi2-dev-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_pi2-dev-jenkins}"
      - string:
          description: "abe-prod:jenkins token for accessing OpenShift PROD cluster"
          id: "abe-prod-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_prod_abe-prod-jenkins}"
      - string:
          description: "y73-dev:jenkins token for accessing OpenShift DEV cluster"
          id: "y73-dev-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_y73-dev-jenkins}"
      - string:
          description: "cmb-dev:jenkins token for accessing OpenShift DEV cluster"
          id: "cmb-dev-jenkins"
          scope: GLOBAL
          secret: "${token_k8s_cmb-dev-jenkins}"
      - string:
          description: "android-keystore-password:jenkins password for android keystore"
          id: "android-keystore-password"
          scope: GLOBAL
          secret: "${password_keystore_android}"
      - string:
          description: "android-keystore-alias-password:jenkins password for android keystore alias"
          id: "android-keystore-alias-password"
          scope: GLOBAL
          secret: "${password_keystore_android-alias}"======== jobs.yaml ========
jobs:
  - file: /tmp/parentseed.groovy
========jenkins slave =======
======== Dockerfile ========
# ARG IMAGE_TAG=3.29-1    # Uncomment this line for local build; the build script will pass in IMAGE_TAG as an input
# The FROM line will be re-written in OpenShift build based on buildconfig
FROM jenkins/jnlp-slave:$IMAGE_TAG


MAINTAINER Sunny Yip <hyip@us.mufg.jp>

LABEL BuildFrom=http://bbk.unionbank.com/projects/DSOPS/repos/jenkins/browse/docker/jenkins-slave

USER root
RUN apt-get update && \
    apt-get install -y sysstat \
                       gettext-base \
                       vim \
                       lsof \
                       telnet \
                       strace \
                       curl \
                       procps \
                       build-essential python3-dev python3-pip \
                       python3.6 \
                       python3-setuptools python3-venv python3-wheel \
                       libffi-dev libpq-dev libssl-dev \
                       git

# Add MUFG CAs in the the ca-bundle for git pulling HTTPS endpoint at bitbucket
# https://support.cloudbees.com/hc/en-us/articles/115000611111-How-to-import-a-ca-cert-to-use-with-git-https-connections-
# The cert at the destination path must be in .crt or update-ca-certificates will ignore it
COPY mub-issuing-ca1.pem /usr/local/share/ca-certificates/mub-issuing-ca1.crt
COPY mub-ca.pem /usr/local/share/ca-certificates/mub-ca.crt
RUN update-ca-certificates

# Install OpenShift Client
ARG oc_url=https://github.com/openshift/origin/releases/download/v3.10.0-rc.0/openshift-origin-client-tools-v3.10.0-rc.0-c20e215-linux-64bit.tar.gz
#ARG oc_url=https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz
# oc 3.11 can't be used. It throw this error: no kind "BuildConfig" is registered for version "v1" in scheme "k8s.io/kubernetes/pkg/api/legacyscheme/scheme.go:29"

RUN mkdir -p /tmp/oc \
  && cd /tmp/oc \
  && curl -sSL -k -o oc.tar.gz ${oc_url} \
  && tar -zxf oc.tar.gz \
  && cp /tmp/oc/*/oc /usr/local/bin/ \
  && rm -rf /tmp/oc


# Create a Java KeyStore
COPY mub-issuing-ca1.pem /var/tmp/certs/mub-issuing-ca1.pem
COPY mub-ca.pem /var/tmp/certs/mub-ca.pem
RUN keytool -importcert -file /var/tmp/certs/mub-issuing-ca1.pem -storepass changeme \
            -noprompt -keystore /var/tmp/certs/mub-ca.jks -storetype jks -alias mub-issuing-ca1 && \
    keytool -importcert -file /var/tmp/certs/mub-ca.pem -storepass changeme \
            -noprompt -keystore /var/tmp/certs/mub-ca.jks -storetype jks -alias mub-ca

# Set git --system via the gitconfig file
COPY ca-cert.ca /var/tmp/certs/ca-cert.ca
COPY gitconfig /etc/gitconfig
#RUN git config --system http."https://bbk.unionbank.com/".sslCAinfo /var/tmp/certs/ca-cert.ca

# Install Python Packages
COPY requirements.txt .
RUN pip3 install -r requirements.txt
ENV REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt

ENV RUNAS_USER=jenkins

# The following was taken from https://blog.openshift.com/jupyter-on-openshift-part-6-running-as-an-assigned-user-id/
# Adjust permissions on home directory so writable by group root.
RUN chgrp -Rf root /home/$RUNAS_USER && chmod -Rf g+w /home/$RUNAS_USER

# Adjust permissions on /etc/passwd so writable by group root.
RUN chmod g+w /etc/passwd

COPY set-user-id /usr/local/bin/set-user-id
RUN sed -i '/#!\//a /usr/local/bin/set-user-id    #See file for what this does' /usr/local/bin/jenkins-slave

USER $RUNAS_USER

======== build.sh ========
#!/bin/bash -e

REGISTRY=docker-nexus.opn-apps-mz-dev.unionbank.com
IMAGE=jenkins-jnlp-slave
TAG=3.29-1
SUBTAG=-mufg-1

docker build -t ${REGISTRY}/${IMAGE}:${TAG}${SUBTAG} . -f Dockerfile.jnlp-slave \
  --build-arg=IMAGE_TAG=${TAG} \
  --label GitCommitHash=$(git log -1 --format="%H") \
  --network host \
  --build-arg=http_proxy=http://10.97.240.52:3128 \
  --build-arg=https_proxy=http://10.97.240.52:3128

#docker push ${REGISTRY}/${IMAGE}:${TAG}

======== docker-build-params ========
APP_NAME=jenkins-slave
FROM_IMAGE=jenkins/jnlp-slave
TO_IMAGE=jenkins-jnlp-slave

FROM_IMAGE_TAG=[VERSION]
TO_IMAGE_TAG=[VERSION]
======== gitconfig ========
[user]
        name = Jenkins Agent
        email = unused@us.mufg.jp
[http]
        sslverify = true
[http "https://bbk.unionbank.com/"]
        sslCAinfo = /var/tmp/certs/ca-cert.ca
======== requirements.txt ========
PyYAML==5.1.1
requests==2.22.0
Jinja2==2.10.1
beautifulsoup4==4.8.0
======== set-user-id ========
#!/bin/bash

# Ensure that assigned uid has entry in /etc/passwd.
# Taken from https://blog.openshift.com/jupyter-on-openshift-part-6-running-as-an-assigned-user-id/

if [ `id -u` -ge 10000 ]; then
cat /etc/passwd | sed -e "s/^$RUNAS_USER:/builder:/" > /tmp/passwd
echo "$RUNAS_USER:x:$(id -u):$(id -g):,,,:/home/$RUNAS_USER:/bin/bash" >> /tmp/passwd
cat /tmp/passwd > /etc/passwd
rm /tmp/passwd
fi
========jenkins =======
======== Dockerfile ========
# ARG IMAGE_TAG=2.176.2.3    # Uncomment this line for local build; the build script will pass in IMAGE_TAG as an input
# The FROM line will be re-written in OpenShift build based on buildconfig
FROM cloudbees/jenkins-enterprise:$IMAGE_TAG

# See details of source image at 
# https://hub.docker.com/r/cloudbees/jenkins-enterprise/
# https://github.com/cloudbees/docker

LABEL BuildFrom=http://bbk.unionbank.com/projects/DSOPS/repos/jenkins/browse/docker/jenkins

USER root
#RUN apt-get update && apt-get install -y sysstat vim lsof telnet strace

# Add MUFG CAs in the the ca-bundle for git pulling HTTPS endpoint at bitbucket
# https://support.cloudbees.com/hc/en-us/articles/115000611111-How-to-import-a-ca-cert-to-use-with-git-https-connections-
# The cert at the destination path must be in .crt or update-ca-certificates will ignore it
COPY mub-issuing-ca1.pem /usr/local/share/ca-certificates/mub-issuing-ca1.crt
COPY mub-ca.pem /usr/local/share/ca-certificates/mub-ca.crt
RUN update-ca-certificates

# Done with privileged operations; drop to non-root user
USER jenkins

# Override these VARs to point to the CloudBees update center instead of the default OSS
ENV JENKINS_UC http://jenkins-updates.cloudbees.com/update-center
ENV JENKINS_UC_DOWNLOAD http://jenkins-updates.cloudbees.com/download

# The following steps are taken from https://github.com/jenkinsci/docker
# jenkins-support is needed to support use of retry-command function in install-plugins.sh
COPY jenkins-support /usr/local/bin/jenkins-support
COPY install-plugins.sh /usr/local/bin/install-plugins.sh

# Install Jenkins Plugins per plugins.txt
COPY plugins.txt /usr/share/jenkins/ref/plugins.txt
#RUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt

# Copy the seedjob which creates the initial jobs into the container
COPY parentseed.groovy /tmp/parentseed.groovy

#https://hub.docker.com/r/cloudbees/jenkins-enterprise/
#https://github.com/cloudbees/docker
======== docker-build-params ========
APP_NAME=jenkins
CONTEXT_DIR=docker/jenkins

FROM_IMAGE=cloudbees/jenkins-enterprise
TO_IMAGE=cloudbees-jenkins-enterprise-with-plugins
FROM_IMAGE_TAG=2.176.4.3
TO_IMAGE_TAG=2.176.4.3
======== export_config.sh ========
curl -u alice:alice -X POST http://10.97.214.67:8080/configuration-as-code/export
======== install-plugins.sh ========
#!/bin/bash -eu

# Resolve dependencies and download plugins given on the command line
#
# FROM jenkins
# RUN install-plugins.sh docker-slaves github-branch-source

set -o pipefail

REF_DIR=${REF:-/usr/share/jenkins/ref/plugins}
FAILED="$REF_DIR/failed-plugins.txt"

. /usr/local/bin/jenkins-support

getLockFile() {
    printf '%s' "$REF_DIR/${1}.lock"
}

getArchiveFilename() {
    printf '%s' "$REF_DIR/${1}.jpi"
}

download() {
    local plugin originalPlugin version lock ignoreLockFile
    plugin="$1"
    version="${2:-latest}"
    ignoreLockFile="${3:-}"
    lock="$(getLockFile "$plugin")"

    if [[ $ignoreLockFile ]] || mkdir "$lock" &>/dev/null; then
        if ! doDownload "$plugin" "$version"; then
            # some plugin don't follow the rules about artifact ID
            # typically: docker-plugin
            originalPlugin="$plugin"
            plugin="${plugin}-plugin"
            if ! doDownload "$plugin" "$version"; then
                echo "Failed to download plugin: $originalPlugin or $plugin" >&2
                echo "Not downloaded: ${originalPlugin}" >> "$FAILED"
                return 1
            fi
        fi

        if ! checkIntegrity "$plugin"; then
            echo "Downloaded file is not a valid ZIP: $(getArchiveFilename "$plugin")" >&2
            echo "Download integrity: ${plugin}" >> "$FAILED"
            return 1
        fi

        resolveDependencies "$plugin"
    fi
}

doDownload() {
    local plugin version url jpi
    plugin="$1"
    version="$2"
    jpi="$(getArchiveFilename "$plugin")"

    # If plugin already exists and is the same version do not download
    if test -f "$jpi" && unzip -p "$jpi" META-INF/MANIFEST.MF | tr -d '\r' | grep "^Plugin-Version: ${version}$" > /dev/null; then
        echo "Using provided plugin: $plugin"
        return 0
    fi

    if [[ "$version" == "latest" && -n "$JENKINS_UC_LATEST" ]]; then
        # If version-specific Update Center is available, which is the case for LTS versions,
        # use it to resolve latest versions.
        url="$JENKINS_UC_LATEST/latest/${plugin}.hpi"
    elif [[ "$version" == "experimental" && -n "$JENKINS_UC_EXPERIMENTAL" ]]; then
        # Download from the experimental update center
        url="$JENKINS_UC_EXPERIMENTAL/latest/${plugin}.hpi"
    elif [[ "$version" == incrementals* ]] ; then
        # Download from Incrementals repo: https://jenkins.io/blog/2018/05/15/incremental-deployment/
        # Example URL: https://repo.jenkins-ci.org/incrementals/org/jenkins-ci/plugins/workflow/workflow-support/2.19-rc289.d09828a05a74/workflow-support-2.19-rc289.d09828a05a74.hpi
        local groupId incrementalsVersion
        arrIN=("${version//;/ }")
        groupId=${arrIN[1]}
        incrementalsVersion=${arrIN[2]}
        url="${JENKINS_INCREMENTALS_REPO_MIRROR}/$(echo "${groupId}" | tr '.' '/')/${plugin}/${incrementalsVersion}/${plugin}-${incrementalsVersion}.hpi"
    else
        JENKINS_UC_DOWNLOAD=${JENKINS_UC_DOWNLOAD:-"$JENKINS_UC/download"}
        url="$JENKINS_UC_DOWNLOAD/plugins/$plugin/$version/${plugin}.hpi"
    fi

    echo "Downloading plugin: $plugin from $url"
    retry_command curl "${CURL_OPTIONS:--sSfL}" --connect-timeout "${CURL_CONNECTION_TIMEOUT:-20}" --retry "${CURL_RETRY:-5}" --retry-delay "${CURL_RETRY_DELAY:-0}" --retry-max-time "${CURL_RETRY_MAX_TIME:-60}" "$url" -o "$jpi"
    return $?
}

checkIntegrity() {
    local plugin jpi
    plugin="$1"
    jpi="$(getArchiveFilename "$plugin")"

    unzip -t -qq "$jpi" >/dev/null
    return $?
}

resolveDependencies() {
    local plugin jpi dependencies
    plugin="$1"
    jpi="$(getArchiveFilename "$plugin")"

    dependencies="$(unzip -p "$jpi" META-INF/MANIFEST.MF | tr -d '\r' | tr '\n' '|' | sed -e 's#| ##g' | tr '|' '\n' | grep "^Plugin-Dependencies: " | sed -e 's#^Plugin-Dependencies: ##')"

    if [[ ! $dependencies ]]; then
        echo " > $plugin has no dependencies"
        return
    fi

    echo " > $plugin depends on $dependencies"

    IFS=',' read -r -a array <<< "$dependencies"

    for d in "${array[@]}"
    do
        plugin="$(cut -d':' -f1 - <<< "$d")"
        if [[ $d == *"resolution:=optional"* ]]; then
            echo "Skipping optional dependency $plugin"
        else
            local pluginInstalled
            if pluginInstalled="$(echo -e "${bundledPlugins}\n${installedPlugins}" | grep "^${plugin}:")"; then
                pluginInstalled="${pluginInstalled//[$'\r']}"
                local versionInstalled; versionInstalled=$(versionFromPlugin "${pluginInstalled}")
                local minVersion; minVersion=$(versionFromPlugin "${d}")
                if versionLT "${versionInstalled}" "${minVersion}"; then
                    echo "Upgrading bundled dependency $d ($minVersion > $versionInstalled)"
                    download "$plugin" &
                else
                    echo "Skipping already installed dependency $d ($minVersion <= $versionInstalled)"
                fi
            else
                download "$plugin" &
            fi
        fi
    done
    wait
}

bundledPlugins() {
    local JENKINS_WAR=/usr/share/jenkins/jenkins.war
    if [ -f $JENKINS_WAR ]
    then
        TEMP_PLUGIN_DIR=/tmp/plugintemp.$$
        for i in $(jar tf $JENKINS_WAR | grep -E '[^detached-]plugins.*\..pi' | sort)
        do
            rm -fr $TEMP_PLUGIN_DIR
            mkdir -p $TEMP_PLUGIN_DIR
            PLUGIN=$(basename "$i"|cut -f1 -d'.')
            (cd $TEMP_PLUGIN_DIR;jar xf "$JENKINS_WAR" "$i";jar xvf "$TEMP_PLUGIN_DIR/$i" META-INF/MANIFEST.MF >/dev/null 2>&1)
            VER=$(grep -E -i Plugin-Version "$TEMP_PLUGIN_DIR/META-INF/MANIFEST.MF"|cut -d: -f2|sed 's/ //')
            echo "$PLUGIN:$VER"
        done
        rm -fr $TEMP_PLUGIN_DIR
    else
        rm -f "$TEMP_ALREADY_INSTALLED"
        echo "ERROR file not found: $JENKINS_WAR"
        exit 1
    fi
}

versionFromPlugin() {
    local plugin=$1
    if [[ $plugin =~ .*:.* ]]; then
        echo "${plugin##*:}"
    else
        echo "latest"
    fi

}

installedPlugins() {
    for f in "$REF_DIR"/*.jpi; do
        echo "$(basename "$f" | sed -e 's/\.jpi//'):$(get_plugin_version "$f")"
    done
}

jenkinsMajorMinorVersion() {
    local JENKINS_WAR
    JENKINS_WAR=/usr/share/jenkins/jenkins.war
    if [[ -f "$JENKINS_WAR" ]]; then
        local version major minor
        version="$(java -jar $JENKINS_WAR --version)"
        major="$(echo "$version" | cut -d '.' -f 1)"
        minor="$(echo "$version" | cut -d '.' -f 2)"
        echo "$major.$minor"
    else
        echo "ERROR file not found: $JENKINS_WAR"
        return 1
    fi
}

main() {
    local plugin pluginVersion jenkinsVersion
    local plugins=()

    mkdir -p "$REF_DIR" || exit 1
    rm -f "$FAILED"

    # Read plugins from stdin or from the command line arguments
    if [[ ($# -eq 0) ]]; then
        while read -r line || [ "$line" != "" ]; do
            # Remove leading/trailing spaces, comments, and empty lines
            plugin=$(echo "${line}" | tr -d '\r' | sed -e 's/^[ \t]*//g' -e 's/[ \t]*$//g' -e 's/[ \t]*#.*$//g' -e '/^[ \t]*$/d')

            # Avoid adding empty plugin into array
            if [ ${#plugin} -ne 0 ]; then
                plugins+=("${plugin}")
            fi
        done
    else
        plugins=("$@")
    fi

    # Create lockfile manually before first run to make sure any explicit version set is used.
    echo "Creating initial locks..."
    for plugin in "${plugins[@]}"; do
        mkdir "$(getLockFile "${plugin%%:*}")"
    done

    echo "Analyzing war..."
    bundledPlugins="$(bundledPlugins)"

    echo "Registering preinstalled plugins..."
    installedPlugins="$(installedPlugins)"

    # Check if there's a version-specific update center, which is the case for LTS versions
    jenkinsVersion="$(jenkinsMajorMinorVersion)"
    if curl -fsL -o /dev/null "$JENKINS_UC/$jenkinsVersion"; then
        JENKINS_UC_LATEST="$JENKINS_UC/$jenkinsVersion"
        echo "Using version-specific update center: $JENKINS_UC_LATEST..."
    else
        JENKINS_UC_LATEST=
    fi

    echo "Downloading plugins..."
    for plugin in "${plugins[@]}"; do
        pluginVersion=""

        if [[ $plugin =~ .*:.* ]]; then
            pluginVersion=$(versionFromPlugin "${plugin}")
            plugin="${plugin%%:*}"
        fi

        download "$plugin" "$pluginVersion" "true" &
    done
    wait

    echo
    echo "WAR bundled plugins:"
    echo "${bundledPlugins}"
    echo
    echo "Installed plugins:"
    installedPlugins

    if [[ -f $FAILED ]]; then
        echo "Some plugins failed to download!" "$(<"$FAILED")" >&2
        exit 1
    fi

    echo "Cleaning up locks"
    rm -r "$REF_DIR"/*.lock
}

main "$@"
======== jenkins-support ========
#!/bin/bash -eu

# compare if version1 < version2
versionLT() {
    local v1; v1=$(echo "$1" | cut -d '-' -f 1 )
    local q1; q1=$(echo "$1" | cut -s -d '-' -f 2- )
    local v2; v2=$(echo "$2" | cut -d '-' -f 1 )
    local q2; q2=$(echo "$2" | cut -s -d '-' -f 2- )
    if [ "$v1" = "$v2" ]; then
        if [ "$q1" = "$q2" ]; then
            return 1
        else
            if [ -z "$q1" ]; then
                return 1
            else
                if [ -z "$q2" ]; then
                    return 0
                else
                    [  "$q1" = "$(echo -e "$q1\n$q2" | sort -V | head -n1)" ]
                fi
            fi
        fi
    else
        [  "$v1" = "$(echo -e "$v1\n$v2" | sort -V | head -n1)" ]
    fi
}

# returns a plugin version from a plugin archive
get_plugin_version() {
    local archive; archive=$1
    local version; version=$(unzip -p "$archive" META-INF/MANIFEST.MF | grep "^Plugin-Version: " | sed -e 's#^Plugin-Version: ##')
    version=${version%%[[:space:]]}
    echo "$version"
}

# Copy files from /usr/share/jenkins/ref into $JENKINS_HOME
# So the initial JENKINS-HOME is set with expected content.
# Don't override, as this is just a reference setup, and use from UI
# can then change this, upgrade plugins, etc.
copy_reference_file() {
    f="${1%/}"
    b="${f%.override}"
    rel="${b:23}"
    version_marker="${rel}.version_from_image"
    dir=$(dirname "${b}")
    local action;
    local reason;
    local container_version;
    local image_version;
    local marker_version;
    local log; log=false
    if [[ ${rel} == plugins/*.jpi ]]; then
        container_version=$(get_plugin_version "$JENKINS_HOME/${rel}")
        image_version=$(get_plugin_version "${f}")
        if [[ -e $JENKINS_HOME/${version_marker} ]]; then
            marker_version=$(cat "$JENKINS_HOME/${version_marker}")
            if versionLT "$marker_version" "$container_version"; then
                action="SKIPPED"
                reason="Installed version ($container_version) has been manually upgraded from initial version ($marker_version)"
                log=true
            else
                if [[ "$image_version" == "$container_version" ]]; then
                    action="SKIPPED"
                    reason="Version from image is the same as the installed version $image_version"
                else
                    if versionLT "$image_version" "$container_version"; then
                        action="SKIPPED"
                        log=true
                        reason="Image version ($image_version) is older than installed version ($container_version)"
                    else
                        action="UPGRADED"
                        log=true
                        reason="Image version ($image_version) is newer than installed version ($container_version)"
                    fi
                fi
            fi
        else
            if [[ -n "$TRY_UPGRADE_IF_NO_MARKER" ]]; then
                if [[ "$image_version" == "$container_version" ]]; then
                    action="SKIPPED"
                    reason="Version from image is the same as the installed version $image_version (no marker found)"
                    # Add marker for next time
                    echo "$image_version" > "$JENKINS_HOME/${version_marker}"
                else
                    if versionLT "$image_version" "$container_version"; then
                        action="SKIPPED"
                        log=true
                        reason="Image version ($image_version) is older than installed version ($container_version) (no marker found)"
                    else
                        action="UPGRADED"
                        log=true
                        reason="Image version ($image_version) is newer than installed version ($container_version) (no marker found)"
                    fi
                fi
            fi
        fi
        if [[ ! -e $JENKINS_HOME/${rel} || "$action" == "UPGRADED" || $f = *.override ]]; then
            action=${action:-"INSTALLED"}
            log=true
            mkdir -p "$JENKINS_HOME/${dir:23}"
            cp -pr "${f}" "$JENKINS_HOME/${rel}";
            # pin plugins on initial copy
            touch "$JENKINS_HOME/${rel}.pinned"
            echo "$image_version" > "$JENKINS_HOME/${version_marker}"
            reason=${reason:-$image_version}
        else
            action=${action:-"SKIPPED"}
        fi
    else
        if [[ ! -e $JENKINS_HOME/${rel} || $f = *.override ]]
        then
            action="INSTALLED"
            log=true
            mkdir -p "$JENKINS_HOME/${dir:23}"
            cp -pr "${f}" "$JENKINS_HOME/${rel}";
        else
            action="SKIPPED"
        fi
    fi
    if [[ -n "$VERBOSE" || "$log" == "true" ]]; then
        if [ -z "$reason" ]; then
            echo "$action $rel" >> "$COPY_REFERENCE_FILE_LOG"
        else
            echo "$action $rel : $reason" >> "$COPY_REFERENCE_FILE_LOG"
        fi
    fi
}

# Retries a command a configurable number of times with backoff.
#
# The retry count is given by ATTEMPTS (default 60), the initial backoff
# timeout is given by TIMEOUT in seconds (default 1.)
#
function retry_command() {
  local max_attempts=${ATTEMPTS-60}
  local timeout=${TIMEOUT-1}
  local success_timeout=${SUCCESS_TIMEOUT-1}
  local max_success_attempt=${SUCCESS_ATTEMPTS-1}
  local attempt=0
  local success_attempt=0
  local exitCode=0

  while (( $attempt < $max_attempts ))
  do
    set +e
    "$@"
    exitCode=$?
    set -e

    if [[ $exitCode == 0 ]]
    then
      success_attempt=$(( success_attempt + 1 ))
      if (( $success_attempt >= $max_success_attempt))
      then
        break
      else
        sleep $success_timeout
        continue
      fi
    fi

    echo "$(date -u '+%T') Failure ($exitCode) Retrying in $timeout seconds..." 1>&2
    sleep $timeout
    success_attempt=0
    attempt=$(( attempt + 1 ))
    timeout=$(( timeout ))
  done

  if [[ $exitCode != 0 ]]
  then
    echo "$(date -u '+%T') Failed in the last attempt ($@)" 1>&2
  fi

  return $exitCode
}
======== local_build.sh ========
#!/bin/bash -e

REGISTRY=docker-nexus.opn-apps-mz-dev.unionbank.com
IMAGE=cloudbees-jenkins-enterprise-with-plugins
#TAG=2.150.2.3
TAG=2.176.3.2

docker -D build -t ${REGISTRY}/${IMAGE}:${TAG} . -f Dockerfile \
  --build-arg=IMAGE_TAG=${TAG} \
  --network host \
  --build-arg=http_proxy=http://chabedev304.unionbank.com:9080 \
  --build-arg=https_proxy=http://chabedev304.unionbank.com:9080 \



#  --build-arg=http_proxy=http://10.97.240.52:3128 \
#  --build-arg=http_proxy=http://ub-app-proxy.uboc.com:80 \

docker push ${REGISTRY}/${IMAGE}:${TAG}
======== parentseed.groovy ========
/**
  * There are a few reasons why this parent seed file is needed. The main reason is we need to use the Jenkins configuration as
  * code plugin to actually generate a seed job which itself will generate all the other jobs on the Jenkins. The reason why
  * this file can't do that is this file has no simple way of updating compared to the git repo that seed job refers to.
  * 
  */
import jenkins.*
import jenkins.model.*
import hudson.*
import hudson.model.*

// TODO: Configuration of build authorization plugin might have to go here in order to get below working in clean Jenkins install.
folder("admin_utils") {
    description("Folder for holding administrative utilities.")
}

folder("admin_utils/backups") {
    description("Backup management utils")
}

folder("admin_utils/jobs") {
    description("Jobs management utils")
}

def seedName = "actualSeedJob"
job("admin_utils/jobs/${seedName}") {
    scm {
        git {
            remote {
                url('https://bbk.unionbank.com/scm/dsops/pipeline_intake.git')
                credentials("bitbucket")
            }
            branch('refs/heads/master')
        }
    }
    steps {
        dsl {
            external(".job_dsl/bin/${seedName}.groovy")
            removeAction('DISABLE')  // Given that jobs will need to be audited, disabling jobs that are removed instead of deleting
        }
    }
}
======== plugins.txt ========
async-http-client:1.7.24.1
jackson2-api:2.9.9
blueocean-commons:1.7.1
bouncycastle-api
cloudbees-uc-data-api:4.41
structs:1.19
credentials:2.2.0
metrics:3.1.2.11
support-core:2.49
cloudbees-blueocean-default-theme:0.3
cloudbees-folder:6.8
cloudbees-folders-plus:3.8
script-security:1.60
command-launcher:1.3
display-url-api:2.2.0
jdk-tool:1.2
workflow-step-api:2.20
scm-api:2.2.7
workflow-api:2.28
junit:1.24
mailer:1.21
mapdb-api:1.0.9.0
variant:1.2
nectar-rbac:5.21
token-macro:2.4
ssh-credentials:1.14
durable-task:1.29
plain-credentials:1.5
credentials-binding:1.19
pipeline-model-api:1.3.1
ace-editor:1.1
docker-workflow:1.15
jquery-detached:1.2.1
workflow-scm-step:2.6
workflow-support:2.19
workflow-cps:2.54
workflow-job:2.23
pipeline-model-extensions:1.3.1
authentication-tokens:1.3
apache-httpcomponents-client-4-api:4.5.5-3.0
jsch:0.1.54.2
git-client:2.7.3
gradle:1.28
git-server:1.7
docker-commons:1.11
workflow-cps-global-lib:2.9
branch-api:2.0.20
pipeline-input-step:2.8
workflow-multibranch:2.20
workflow-durable-task-step:2.19
pipeline-stage-tags-metadata:1.3.1
kubernetes:1.15.6
kubernetes-credentials:0.4.0
pipeline-model-declarative-agent:1.1.1
pipeline-stage-step:2.3
workflow-basic-steps:2.9
mock-security-realm:1.3
pipeline-model-definition:1.3.1
cloudbees-nodes-plus:1.16
cloudbees-ssh-slaves:2.1
node-iterator-api:1.5.0
sonar:2.9
aws-java-sdk:1.11.341
aws-credentials:1.23
infradna-backup:3.38.2
cloudbees-ha:4.20
javadoc:1.4
maven-plugin:3.1.2
cloudbees-template:4.36
cloudbees-groovy-view:1.7
cloudbees-view-creation-filter:1.5
cloudbees-jsync-archiver:5.6
matrix-project:1.12
email-ext:2.62
cloudbees-workflow-template:2.7
workflow-cps-checkpoint:2.7
console-badge:1.1
pipeline-graph-analysis:1.7
pipeline-rest-api:2.10
handlebars:1.1.1
momentjs:1.1.1
analysis-core:1.95
pipeline-stage-view:2.10
cloudbees-workflow-ui:2.1
pipeline-milestone-step:1.3.1
pipeline-build-step:2.7
workflow-aggregator:2.5
wikitext:3.8
ldap:1.20
git:3.9.1
github-api:1.90
github:1.29.2
github-branch-source:2.3.5
nexus-artifact-uploader:2.10
configuration-as-code-support:1.19
configuration-as-code:1.29
antisamy-markup-formatter:1.5
veracode-scanner:1.6
active-directory:2.16
htmlpublisher:1.17
job-dsl:1.76
authorize-project:1.3.0
pipeline-utility-steps:2.3.0
saml:1.1.2
openshift-client:1.0.30
envinject:2.2.0
monitoring:1.79.0
cloudbees-bitbucket-branch-source:2.4.4
handy-uri-templates-2-api:2.1.7-1.0
mercurial:2.5
splunk-devops:1.7.4
promoted-builds:3.2
extensible-choice-parameter:1.6.0
nexus-jenkins-plugin:3.6.20190722-122200.83d1447
groovy:2.2
groovy-postbuild:2.5
========maven =======
======== Dockerfile ========
# ARG IMAGE_TAG=3.6.1-jdk-11    # Uncomment this line for local build; the build script will pass in IMAGE_TAG as an input
# The FROM line will be re-written in OpenShift build based on buildconfig
FROM maven:$IMAGE_TAG

MAINTAINER Sunny Yip <hyip@us.mufg.jp>
LABEL BuildFrom=http://bbk.unionbank.com/projects/DSOPS/repos/jenkins/browse/docker/maven

#RUN apt-get update && apt-get install vim -y

# Create a Java KeyStore
COPY mub-issuing-ca1.pem /var/tmp/certs/mub-issuing-ca1.pem
COPY mub-ca.pem /var/tmp/certs/mub-ca.pem
COPY MUBRoot.txt /var/tmp/certs/MUBRoot.txt
COPY MUBIssue1.txt /var/tmp/certs/MUBIssue1.txt
COPY MUBIssue2.txt /var/tmp/certs/MUBIssue2.txt
COPY MUBIssue3.txt /var/tmp/certs/MUBIssue3.txt
COPY MUBIssue4.txt /var/tmp/certs/MUBIssue4.txt

RUN keytool -importcert -file /var/tmp/certs/mub-issuing-ca1.pem -storepass changeme \
            -noprompt -keystore /var/tmp/certs/mub-ca.jks -storetype jks -alias mub-issuing-ca1 && \
    keytool -importcert -file /var/tmp/certs/mub-ca.pem -storepass changeme \
            -noprompt -keystore /var/tmp/certs/mub-ca.jks -storetype jks -alias mub-ca

RUN keytool -import -trustcacerts -alias mub_root -file /var/tmp/certs/MUBRoot.txt -noprompt -storepass changeit -keystore  /usr/local/openjdk-11/lib/security/cacerts
RUN keytool -import -trustcacerts -alias mub_issue1 -file /var/tmp/certs/MUBIssue1.txt -noprompt -storepass changeit -keystore  /usr/local/openjdk-11/lib/security/cacerts
RUN keytool -import -trustcacerts -alias mub_issue2 -file /var/tmp/certs/MUBIssue2.txt -noprompt -storepass changeit -keystore  /usr/local/openjdk-11/lib/security/cacerts
RUN keytool -import -trustcacerts -alias mub_issue3 -file /var/tmp/certs/MUBIssue3.txt -noprompt -storepass changeit -keystore  /usr/local/openjdk-11/lib/security/cacerts
RUN keytool -import -trustcacerts -alias mub_issue4 -file /var/tmp/certs/MUBIssue4.txt -noprompt -storepass changeit -keystore  /usr/local/openjdk-11/lib/security/cacerts

RUN cat /var/tmp/certs/mub-issuing-ca1.pem /var/tmp/certs/mub-ca.pem >> /etc/ssl/certs/ca-certificates.crt

ENV MAVEN_OPTS "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"


# Packaging a local repository with the image per https://hub.docker.com/_/maven/
COPY gitconfig /etc/gitconfig
COPY pom.xml /tmp/pom.xml
COPY settings-docker.xml /usr/share/maven/ref/
RUN mvn -B -f /tmp/pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:resolve 
#RUN mvn -Dhttp.proxyHost=10.97.214.67 -Dhttp.proxyPort=3128 -B -f /tmp/pom.xml -s /usr/share/maven/ref/settings.xml dependency:resolve 


#RUN chmod +x /root && mkdir /root/.m2 && chmod 777 -R /root/.m2
#

ENV RUNAS_USER=jenkins

# The following was taken from https://blog.openshift.com/jupyter-on-openshift-part-6-running-as-an-assigned-user-id/
# aimming to make the runtime uid a valid user
#
# Adjust permissions on home directory so writable by group root.
#RUN chgrp -Rf root /home/$RUNAS_USER && chmod -Rf g+w /home/$RUNAS_USER

# Adjust permissions on /etc/passwd so writable by group root.
RUN chmod g+w /etc/passwd

COPY set-user-id /usr/local/bin/set-user-id

# Inject the set-user-id script at the ENTRYPOINT - See Dockerfile of underlying image for actual ENTRYPOINT
RUN sed -i '/#!\s*\//a /usr/local/bin/set-user-id    #See file for what this does' /usr/local/bin/mvn-entrypoint.sh

======== build.sh ========
#!/bin/bash -e

REGISTRY=docker-nexus.opn-apps-mz-dev.unionbank.com
IMAGE=maven
TAG=3.6-jdk-11
SUBTAG=-mufg-2

docker build -t ${REGISTRY}/${IMAGE}:${TAG}${SUBTAG} . -f Dockerfile \
  --build-arg=IMAGE_TAG=${TAG} \
  --label GitCommitHash=$(git log -1 --format="%H") \
  --network host \
  --build-arg=http_proxy=http://10.97.240.52:3128 \
  --build-arg=https_proxy=http://10.97.240.52:3128

#docker push ${REGISTRY}/${IMAGE}:${TAG}

======== docker-build-params ========
APP_NAME=maven
FROM_IMAGE=library/maven
TO_IMAGE=maven

FROM_IMAGE_TAG=[VERSION]
TO_IMAGE_TAG=[VERSION]
======== gitconfig ========
[user]
        name = Jenkins Agent
        email = unused@us.mufg.jp
[http]
        sslverify = true======== pom.xml ========
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
<!--
    <parent>
        <groupId>com.mub</groupId>
        <artifactId>enterprise-tomcat-pom</artifactId>
        <version>jws-5.0</version>
    </parent>
-->
    <groupId>unionbank.tsi</groupId>
    <artifactId>maven-build-container</artifactId>
    <version>1.0</version>

    <build>
      <pluginManagement>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.1.1</version>
          </plugin> 
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-help-plugin</artifactId>
            <version>3.2.0</version>
            <dependencies>
              <dependency>
                <!-- https://mvnrepository.com/artifact/commons-collections/commons-collections -->
                <groupId>commons-collections</groupId>
                <artifactId>commons-collections</artifactId>
                <version>3.2.2</version>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </pluginManagement>
    </build>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.sonarsource.scanner.maven/sonar-maven-plugin -->
        <dependency>
            <groupId>org.sonarsource.scanner.maven</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
            <version>3.6.0.1398</version>
        </dependency>
    </dependencies>
</project>



======== set-user-id ========
#!/bin/bash

# Ensure that assigned uid has entry in /etc/passwd.
# Taken from https://blog.openshift.com/jupyter-on-openshift-part-6-running-as-an-assigned-user-id/

if [ `id -u` -ge 10000 ]; then
cat /etc/passwd | sed -e "s/^$RUNAS_USER:/builder:/" > /tmp/passwd
echo "$RUNAS_USER:x:$(id -u):$(id -g):,,,:/home/$RUNAS_USER:/bin/bash" >> /tmp/passwd
cat /tmp/passwd > /etc/passwd
rm /tmp/passwd
fi
======== settings-docker.xml ========
<settings>
  <localRepository>/usr/share/maven/ref/repository</localRepository>
<!--
-->
  <mirrors>
    <mirror>
      <id>maven-central</id>
      <mirrorOf>central</mirrorOf>
      <name>maven-central</name>
      <url>https://app-nexus.opn-apps-mz-dev.unionbank.com/repository/maven-central/</url>
    </mirror>
  </mirrors>

  <servers>
    <server>
      <id>maven-central</id>
      <!-- The following token is generated from https://app-nexus.opn-apps-mz-dev.unionbank.com/#user/usertoken since Nexus has "Require user tokens for repository authenti
           cation" enabled
      -->
      <password>p3ZbwtE1eJzPPWqUL1IopllZOkONG6JqkzbXyWW_9D-d</password>
      <username>f-cB_yw6</username>
    </server>
  </servers>
</settings>

========
kylemccoy1982@gmail.com

Sal Zafar
s7933_10@hotmail.com and 737-701-0802

Irving Rodriguez
irodriguez3991@gmail.com
209-829-9436
========
static pod

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: jenkins-agent-prod
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: jenkins
        role: jenkins-agent
        mode: static
        env: prod
    spec:
      imagePullSecrets:
        - name: nexus-registry
      initContainers:
      - name: create-jenkins-node
        image: docker-nexus.opn-apps-mz-dev.unionbank.com/utils:0.1
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args: 
          - /node/create_jenkins_nodel.sh
        env:
        - name: JENKINS_URL 
          value: "https://jenkins.unionbank.com"
        - name: EXECUTORS
          value: "4"
        - name: LABELS
          value: "openshift static prod"
        - name: JENKINS_USER
          valueFrom:
            secretKeyRef:
              name: jenkins-api
              key: username
        - name: JENKINS_CRED
          valueFrom:
            secretKeyRef:
              name: jenkins-api
              key: password
        volumeMounts:
        - name: env
          mountPath: "/env"
        - name: jenkins-node
          mountPath: "/node"
      containers:
      - name: jenkins-jnlp-agent
        image: docker-nexus.opn-apps-mz-dev.unionbank.com/jenkins-jnlp-slave:3.29-1-mufg-1
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args:
          - source /env/jenkins.env && /usr/local/bin/jenkins-slave
        # Following are added as a workaround for git running on OpenShift
        env:
        - name: JENKINS_URL 
          value: "https://jenkins.unionbank.com"
        - name: JENKINS_USER
          valueFrom:
            secretKeyRef:
              name: jenkins-api
              key: username
        - name: JENKINS_CRED
          valueFrom:
            secretKeyRef:
              name: jenkins-api
              key: password
        - name: JENKINS_AGENT_WORKDIR
          value: "/var/tmp/jenkins/agent"
        - name: GIT_COMMITTER_NAME
          value: jenkins
        - name: GIT_COMMITTER_EMAIL
          value: jenkins
        - name: JAVA_OPTS
          value: "-Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme"
        volumeMounts:
        - name: env
          mountPath: "/env"
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash","-c","curl -skL -X POST -u ${JENKINS_USER}:${JENKINS_CRED} ${JENKINS_URL}/computer/${HOSTNAME}/doDelete"]
      volumes:
      - name: env
        emptyDir: {}
      - name: jenkins-node
        configMap:
          name: jenkins-node
          defaultMode: 0755
====
static sit
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: jenkins
    env: sit
    mode: static
    role: jenkins-static-agent
  name: jenkins-static-agent-sit
  namespace: abe-sit
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
      env: sit
      mode: static
      role: jenkins-static-agent
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: jenkins
        env: sit
        mode: static
        role: jenkins-static-agent
    spec:
      containers:
      - args:
        - source /env/jenkins.env && /usr/local/bin/jenkins-slave
        command:
        - /bin/bash
        - -c
        env:
        - name: JENKINS_URL
          value: https://ch1abelsvmsr207.unionbank.com:8443/ 
        - name: JENKINS_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: jenkins-api-sit
        - name: JENKINS_CRED
          valueFrom:
            secretKeyRef:
              key: password
              name: jenkins-api-sit
        - name: JENKINS_AGENT_WORKDIR
          value: /var/tmp/jenkins/agent
        - name: GIT_COMMITTER_NAME
          value: jenkins
        - name: GIT_COMMITTER_EMAIL
          value: jenkins
        - name: JAVA_OPTS
          value: -Djavax.net.ssl.trustStore=/var/tmp/certs/mub-ca.jks -Djavax.net.ssl.trustStorePassword=changeme
        image: nexus-dev.unionbank.com:5000/jenkins-jnlp-slave:3.29-1-mufg-1
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - curl -skL -X POST -u ${JENKINS_USER}:${JENKINS_CRED} ${JENKINS_URL}/computer/${HOSTNAME}/doDelete
        name: jenkins-jnlp-agent
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /env
          name: env
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: nexus-registry
      initContainers:
      - args:
        - /node/create_jenkins_node.sh
        command:
        - /bin/bash
        - -c
        env:
        - name: JENKINS_URL
          value: https://ch1abelsvmsr207.unionbank.com:8443/
        - name: EXECUTORS
          value: "4"
        - name: LABELS
          value: openshift static sit jenkins-sit
        - name: JENKINS_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: jenkins-api-sit
        - name: JENKINS_CRED
          valueFrom:
            secretKeyRef:
              key: password
              name: jenkins-api-sit
        image: nexus-dev.unionbank.com:5000/utils:0.1
        imagePullPolicy: Always
        name: create-jenkins-node
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /env
          name: env
        - mountPath: /node
          name: jenkins-node
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: env
      - configMap:
          defaultMode: 493
          name: jenkins-node
        name: jenkins-node
